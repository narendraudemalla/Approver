name: Code Validation
run-name: ${{ github.actor }} is running the Github Actions ðŸš€

on: 
  pull_request:
    types: [opened, reopened, synchronize]
    paths:
      - 'force-app/**'
    branches:
      - sit

  push:
    paths:
      - 'force-app/**'
    branches:
      - 'WI-*'

jobs:
  build-and-deploy:
    ## Permissions needed for security scan reports
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status

    runs-on: ubuntu-latest ## Github Hosted [Self Hosted]
    environment: developer
    steps:
      - run: echo "This is my first Job"
        name: "First Job Message"
        
      - name: Checkout Code
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0
          
      - name: npm install
        run: echo "running npm install"
        
      ## Install Salesforce CLI
      - name: Install Salesforce CLI
        run: npm install @salesforce/cli --global

      - name: Install Salesforce Code Analyzer
        run: sf plugins install @salesforce/sfdx-scanner

      ## Run PMD Scan and Generate XML Report
      - name: PMD SCAN
        id: pmd_scan
        run: |
          mkdir -p pmd-reports
          sfdx scanner:run --target "force-app" --format "xml" --output "pmd-reports"
        
      ## Upload PMD report as artifact
      - name: Upload PMD Report
        uses: actions/upload-artifact@v3
        with:
          name: pmd-report
          path: pmd-reports/

      ## Check PMD Violations and Fail Build if Any
      - name: Fail build if there are PMD violations
        if: ${{ steps.pmd_scan.outputs.violations != 0 }}
        run: |
          echo "PMD Violations detected!"
          exit 1

      ## Scan the code using SonarCloud
      - name: SonarCloud Scan
        id: sonar
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: "-Dsonar.apex.pmd.reportPaths=pmd-reports/pmd-report.xml"

      ## Check SonarCloud Quality Gate status
      - name: Check the Quality Gate
        id: check_sonar_quality_gate
        uses: SonarSource/sonarcloud-quality-gate-action@master
        with:
          projectKey: 'your_project_key'
          organization: 'your_organization_key'
          sonarHostUrl: 'https://sonarcloud.io'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        
      ## Fail build if Quality Gate fails
      - name: Fail build if Quality Gate fails
        if: steps.check_sonar_quality_gate.outputs.quality_gate_status != 'OK'
        run: |
          echo "SonarCloud Quality Gate failed!"
          exit 1

      ## Run Salesforce CLI Tests and Generate Code Coverage Report
      - name: Run Apex Tests and Generate Code Coverage
        run: |
          mkdir -p reports
          sfdx force:apex:test:run --codecoverage --resultformat json --outputdir reports/

      ## Decrypt the server.key.enc file
      - name: Decrypt the server.key.enc file
        run: openssl enc -nosalt -aes-256-cbc -d -in ${{ secrets.ENCRYPTED_KEY_FILE }} -out ${{ secrets.JWT_KEY_FILE }} -base64 -K ${{ secrets.KEY }} -iv ${{ secrets.IV }}
        
      ## Authorize with Salesforce org
      - name: Authorize with Salesforce org
        run: sf org login jwt --username ${{ secrets.SF_USERNAME }} --jwt-key-file ${{ secrets.JWT_KEY_FILE }} --client-id ${{ secrets.SF_CLIENT_ID }} --set-default --alias Developer --instance-url ${{ secrets.SF_INSTANCE_URL }}

      ## Validate the code against Salesforce Org
      - name: Validate The Code to Salesforce
        run: sf project deploy validate --source-dir force-app --target-org Developer

  zap_scan:
    runs-on: ubuntu-latest
    name: Scan the web applications
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.6.1
        with:
          docker_name: 'owasp/zap2docker-stable'
          target: 'https://test.salesforce.com'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  clean-up:
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    steps:
      - run: echo "This is my second Job"
        name: "Print Message"
